{"version":3,"sources":["webpack:///../ThemeHandler/usePrefersDarkMode.ts","webpack:///../ThemeHandler/ThemeHandler.tsx"],"names":["usePrefersDarkMode","values","defaultValue","mediaQueryLists","map","q","window","matchMedia","getValue","index","findIndex","mql","matches","useState","value","setValue","useEffect","handler","forEach","addListener","removeListener","ThemeHandler","prefersDark","button","document","querySelector","listener","localStorage","setItem","removeEventListener","addEventListener","manuallySet","themeUiColorMode","preferredMode","location","reload"],"mappings":"mHAgCA,SAASA,IACP,OA7BsCC,EA6BqB,EAAC,GA7BTC,GA6BgB,EA3B7DC,EA2BmB,CAAC,gCA3BMC,KAAI,SAACC,GAAD,OAAOC,OAAOC,WAAWF,MAEvDG,EAAW,WAEf,IAAMC,EAAQN,EAAgBO,WAAU,SAACC,GAAD,OAASA,EAAIC,WAErD,OAAOX,aAAA,EAAAA,EAASQ,KAAUP,GAG5B,EAA0BW,mBAAYL,GAA/BM,EAAP,KAAcC,EAAd,KACAC,qBACE,WAIE,IAAMC,EAAU,kBAAMF,EAASP,IAI/B,OAFAL,EAAgBe,SAAQ,SAACP,GAAD,OAASA,EAAIQ,YAAYF,MAE1C,kBAAMd,EAAgBe,SAAQ,SAACP,GAAD,OAASA,EAAIS,eAAeH,SAEnE,IAEKH,EAzBQ,IAAuBb,EAAaC,EAE7CC,EAEAK,EAON,EAAOM,EAAOC,EAqBDf,QCjCf,SAASqB,IACP,IAAMC,EAActB,IAyBpB,OAvBAgB,qBAAU,WAAM,MACRO,EAAM,UAAGC,gBAAH,aAAG,EAAUC,cAAc,oCAEjCC,EAAW,SAAXA,IACJC,aAAaC,QAAQ,0BAA2B,QAChDL,WAAQM,oBAAoB,QAASH,IAKvC,OAFAH,WAAQO,iBAAiB,QAASJ,GAE3B,kBAAMH,aAAN,EAAMA,EAAQM,oBAAoB,QAASH,MACjD,IAEHV,qBAAU,WAAM,QAI0D,EAHlEe,EAAW,UAAGJ,oBAAH,aAAG,EAAe,2BAC7BK,EAAgB,UAAGL,oBAAH,aAAG,EAAe,uBAClCM,EAAgBX,EAAc,OAAS,QACzCK,eAAiBI,GAAeC,IAAqBC,IACvDN,aAAaC,QAAQ,sBAAuBK,GACpC,QAAR,EAAAC,gBAAA,SAAUC,YAEX,CAACb,IAEG,U,0NAGMD,iB","file":"12-69ca17ff6d7d7d0494ce.js","sourcesContent":["// source: https://usehooks.com/useMedia/\n\nimport { useState, useEffect } from 'react'\n\nconst useMedia = <T>(queries: string[], values: T[], defaultValue: T) => {\n  // Array containing a media query list for each query\n  const mediaQueryLists = queries.map((q) => window.matchMedia(q));\n  // Function that gets value based on matching media query\n  const getValue = () => {\n    // Get index of first media query that matches\n    const index = mediaQueryLists.findIndex((mql) => mql.matches);\n    // Return related value or defaultValue if none\n    return values?.[index] || defaultValue;\n  };\n  // State and setter for matched value\n  const [value, setValue] = useState<T>(getValue);\n  useEffect(\n    () => {\n      // Event listener callback\n      // Note: By defining getValue outside of useEffect we ensure that it has ...\n      // ... current values of hook args (as this hook callback is created once on mount).\n      const handler = () => setValue(getValue);\n      // Set a listener for each media query with above handler as callback.\n      mediaQueryLists.forEach((mql) => mql.addListener(handler));\n      // Remove listeners on cleanup\n      return () => mediaQueryLists.forEach((mql) => mql.removeListener(handler));\n    },\n    [], // Empty array ensures effect is only run on mount and unmount\n  );\n  return value;\n};\n\nfunction usePrefersDarkMode() {\n  return useMedia<boolean>(['(prefers-color-scheme: dark)'], [true], false);\n}\n\nexport default usePrefersDarkMode;","import { useEffect } from 'react'\nimport usePrefersDarkMode from './usePrefersDarkMode'\n\nfunction ThemeHandler() {\n  const prefersDark = usePrefersDarkMode()\n\n  useEffect(() => {\n    const button = document?.querySelector('button[aria-label*=\"Switch to \"]')\n\n    const listener = () => { \n      localStorage.setItem('manually-set-color-pref', 'true')\n      button?.removeEventListener('click', listener)\n    }\n\n    button?.addEventListener('click', listener)\n\n    return () => button?.removeEventListener('click', listener)\n  }, [])\n\n  useEffect(() => {\n    const manuallySet = localStorage?.['manually-set-color-pref']\n    const themeUiColorMode = localStorage?.['theme-ui-color-mode']\n    const preferredMode = prefersDark ? 'dark' : 'light'\n    if (localStorage && !manuallySet && themeUiColorMode !== preferredMode) {\n      localStorage.setItem('theme-ui-color-mode', preferredMode);\n      location?.reload()\n    }\n  }, [prefersDark])\n\n  return null;\n}\n\nexport default ThemeHandler"],"sourceRoot":""}